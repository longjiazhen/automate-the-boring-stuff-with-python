第八章  读写文件
os.path.join() 返回一个文件路径的字符串
这个用处是因为，windows的文件路径用的反斜杠，而 OS X 和 linux 用的是正斜杠
注意：每个倒斜杠需要另一个倒斜杠来转义
os.getcwd() 获取当前路径
os.chdir() 改变路径
os.makedirs() 创建新文件夹，可以递归创建，相当于linux下的mkdir -p
os.path.abspath('.') 将当前路径转换成绝对路径
os.path.isabs() 判断所传递的路径是不是绝对路径
os.path.relpath() 返回两个路径之间的相对路径，如果省略第一个参数，则表示用当前路径
例如 os.path.relpath('/Users/longjiazhen', '/Volumes/Transcend')
结果 '../../Users/longjiazhen'
os.path.dirname(path) 返回path参数最后一个斜杠之前的所有内容（单纯的文件名）
os.path.basename(path) 返回path参数中最后一个斜杠之后的所有内容（单纯的路径名）
以上两个都想要的话，用os.path.split()
os.path.split()的作用相当于(os.path.dirname('temp.txt'),os.path.basename('temp.txt'))
'/usr/bin'.split(os.path.sep) 返回路径中每个文件夹的字符串列表（以/分隔）
os.path.getsize(path)返回path参数中文件的字节数
os.listdir(path) 返回path路径下的所有文件名，注意这里是os模块，不是os.path模块
检查path参数所指的文件或者文件夹是否存在，os.path.exist(path)
检查path参数是否存在并且是一个文件，os.path.isfile(path)
检查path参数是否存在并且是一个文件夹，os.path.isdir(path)

文件读写过程：
1. 调用open()函数，返回一个file对象
2. 调用file对象的read()或者write()对象
用read()读取，结果是一个大字符串；或者用readlines()读取，逐行读取，结果存储在列表中
3. 调用file对象的close()方法，关闭该对象
shelve模块：用二进制临时保存数据
写入数据：
>>> import shelve
>>> shelFile = shelve.open('mydata')
>>> cats = ['Zophie', 'Pooka', 'Simon']
>>> shelFile['cats'] = cats
>>> shelFile.close()
读取数据：
>>> shelFile = shelve.open('mydata')
>>> type(shelFile)
<class 'shelve.DbfilenameShelf'>
>>> shelFile['cats']
['Zophie', 'Pooka', 'Simon']
>>> shelFile.close()
类似字典，shelf值有keys()和values()方法，返回shelf中键值的类似列表的值（如果想得到真正的列表，应该将他们传递给list()函数）
导入pprint模块：
pprint.pprint() 可以将列表或者字典中的内容漂亮打印到屏幕
pprint.pformat() 则是返回同样的文本字符串

习题：
1. 相对路径是相对于当前路径
2. 绝对路径是从根目录开始
3. os.getcwd() 获取当前路径，os.chdir()进入另一个路径
4. 当前目录. 上一级目录..
5. 在 C:\bacon\eggs\spam.txt 中，目录名称是 C:\bacon\eggs\ 基本名称是 spam.txt
6. 可以传给open()函数的3种模式参数是 'r', 'w', 'a'
7. 已有文件以写模式打开，会覆盖之前的内容
8. read() 是将所有内容读取至一个大字符串，readlines() 是逐行读取，保存至列表
9. shelf值与字典相似








